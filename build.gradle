plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'ac.su.kdt'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // dev
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    // web
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // logging
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    // rdb
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
//    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
//    runtimeOnly 'com.mysql:mysql-connector-j'
    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

def buildTime = new Date().format("YYMMdd_HHmm")

bootJar {
    // JAR 파일의 이름을 구성합니다.
    archiveBaseName.set('logging-sample-prj')
    archiveVersion.set("$buildTime") // 또는 version 변수를 사용할 수 있습니다.
    archiveFileName.set("log-check-0.0.1-SNAPSHOT.jar")

    // 빌드 결과물의 경로를 설정합니다.
    destinationDirectory.set(file("./build/custom-libs"))
}
